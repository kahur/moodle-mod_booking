{"version":3,"file":"jquery.barrating.min.js","sources":["../src/jquery.barrating.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * jQuery Bar Rating Plugin v1.2.2\n *\n * http://github.com/antennaio/jquery-bar-rating\n *\n * Copyright (c) 2012-2016 Kazik Pietruszewski\n *\n * This plugin is available under the MIT license.\n * http://www.opensource.org/licenses/mit-license.php\n */\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    }\n}(function ($) {\n\n    var BarRating = (function() {\n\n        function BarRating() {\n            var self = this;\n\n            // wrap element in a wrapper div\n            var wrapElement = function() {\n                var classes = ['br-wrapper'];\n\n                if (self.options.theme !== '') {\n                    classes.push('br-theme-' + self.options.theme);\n                }\n\n                self.$elem.wrap($('<div />', {\n                    'class': classes.join(' ')\n                }));\n            };\n\n            // unwrap element\n            var unwrapElement = function() {\n                self.$elem.unwrap();\n            };\n\n            // find option by value\n            var findOption = function(value) {\n                if ($.isNumeric(value)) {\n                    value = Math.floor(value);\n                }\n\n                return $('option[value=\"' + value + '\"]', self.$elem);\n            };\n\n            // get initial option\n            var getInitialOption = function() {\n                var initialRating = self.options.initialRating;\n\n                if (!initialRating) {\n                    return $('option:selected', self.$elem);\n                }\n\n                return findOption(initialRating);\n            };\n\n            // get empty option\n            var getEmptyOption = function() {\n                var $emptyOpt = self.$elem.find('option[value=\"' + self.options.emptyValue + '\"]');\n\n                if (!$emptyOpt.length && self.options.allowEmpty) {\n                    $emptyOpt = $('<option />', { 'value': self.options.emptyValue });\n\n                    return $emptyOpt.prependTo(self.$elem);\n                }\n\n                return $emptyOpt;\n            };\n\n            // get data\n            var getData = function(key) {\n                var data = self.$elem.data('barrating');\n\n                if (typeof key !== 'undefined') {\n                    return data[key];\n                }\n\n                return data;\n            };\n\n            // set data\n            var setData = function(key, value) {\n                if (value !== null && typeof value === 'object') {\n                    self.$elem.data('barrating', value);\n                } else {\n                    self.$elem.data('barrating')[key] = value;\n                }\n            };\n\n            // save data on element\n            var saveDataOnElement = function() {\n                var $opt = getInitialOption();\n                var $emptyOpt = getEmptyOption();\n\n                var value = $opt.val();\n                var text = $opt.data('html') ? $opt.data('html') : $opt.text();\n\n                // if the allowEmpty option is not set let's check if empty option exists in the select field\n                var allowEmpty = (self.options.allowEmpty !== null) ? self.options.allowEmpty : !!$emptyOpt.length;\n\n                var emptyValue = ($emptyOpt.length) ? $emptyOpt.val() : null;\n                var emptyText = ($emptyOpt.length) ? $emptyOpt.text() : null;\n\n                setData(null, {\n                    userOptions: self.options,\n\n                    // initial rating based on the OPTION value\n                    ratingValue: value,\n                    ratingText: text,\n\n                    // rating will be restored by calling clear method\n                    originalRatingValue: value,\n                    originalRatingText: text,\n\n                    // allow empty ratings?\n                    allowEmpty: allowEmpty,\n\n                    // rating value and text of the empty OPTION\n                    emptyRatingValue: emptyValue,\n                    emptyRatingText: emptyText,\n\n                    // read-only state\n                    readOnly: self.options.readonly,\n\n                    // did the user already select a rating?\n                    ratingMade: false\n                });\n            };\n\n            // remove data on element\n            var removeDataOnElement = function() {\n                self.$elem.removeData('barrating');\n            };\n\n            // return current rating text\n            var ratingText = function() {\n                return getData('ratingText');\n            };\n\n            // return current rating value\n            var ratingValue = function() {\n                return getData('ratingValue');\n            };\n\n            // build widget and return jQuery element\n            var buildWidget = function() {\n                var $w = $('<div />', { 'class': 'br-widget' });\n\n                // create A elements that will replace OPTIONs\n                self.$elem.find('option').each(function() {\n                    var val, text, html, $a;\n\n                    val = $(this).val();\n\n                    // create ratings - but only if val is not defined as empty\n                    if (val !== getData('emptyRatingValue')) {\n                        text = $(this).text();\n                        html = $(this).data('html');\n                        if (html) { text = html; }\n\n                        $a = $('<a />', {\n                            'href': '#',\n                            'data-rating-value': val,\n                            'data-rating-text': text,\n                            'html': (self.options.showValues) ? text : ''\n                        });\n\n                        $w.append($a);\n                    }\n\n                });\n\n                // append .br-current-rating div to the widget\n                if (self.options.showSelectedRating) {\n                    $w.append($('<div />', { 'text': '', 'class': 'br-current-rating' }));\n                }\n\n                // additional classes for the widget\n                if (self.options.reverse) {\n                    $w.addClass('br-reverse');\n                }\n\n                if (self.options.readonly) {\n                    $w.addClass('br-readonly');\n                }\n\n                return $w;\n            };\n\n            // return a jQuery function name depending on the 'reverse' setting\n            var nextAllorPreviousAll = function() {\n                if (getData('userOptions').reverse) {\n                    return 'nextAll';\n                } else {\n                    return 'prevAll';\n                }\n            };\n\n            // set the value of the select field\n            var setSelectFieldValue = function(value) {\n                // change selected option\n                findOption(value).prop('selected', true);\n\n                if (getData('userOptions').triggerChange) {\n                    self.$elem.change();\n                }\n            };\n\n            // reset select field\n            var resetSelectField = function() {\n                $('option', self.$elem).prop('selected', function() {\n                    return this.defaultSelected;\n                });\n\n                if (getData('userOptions').triggerChange) {\n                    self.$elem.change();\n                }\n            };\n\n            // display the currently selected rating\n            var showSelectedRating = function(text) {\n                // text undefined?\n                text = text ? text : ratingText();\n\n                // special case when the selected rating is defined as empty\n                if (text == getData('emptyRatingText')) {\n                    text = '';\n                }\n\n                // update .br-current-rating div\n                if (self.options.showSelectedRating) {\n                    self.$elem.parent().find('.br-current-rating').text(text);\n                }\n            };\n\n            // return rounded fraction of a value (14.4 -> 40, 0.99 -> 90)\n            var fraction = function(value) {\n                return Math.round(((Math.floor(value * 10) / 10) % 1) * 100);\n            };\n\n            // remove all classes from elements\n            var resetStyle = function() {\n                // remove all classes starting with br-*\n                self.$widget.find('a').removeClass(function(index, classes) {\n                    return (classes.match(/(^|\\s)br-\\S+/g) || []).join(' ');\n                });\n            };\n\n            // apply style by setting classes on elements\n            var applyStyle = function() {\n                var $a = self.$widget.find('a[data-rating-value=\"' + ratingValue() + '\"]');\n                var initialRating = getData('userOptions').initialRating;\n                var baseValue = $.isNumeric(ratingValue()) ? ratingValue() : 0;\n                var f = fraction(initialRating);\n                var $all, $fractional;\n\n                resetStyle();\n\n                // add classes\n                $a.addClass('br-selected br-current')[nextAllorPreviousAll()]()\n                    .addClass('br-selected');\n\n                if (!getData('ratingMade') && $.isNumeric(initialRating)) {\n                    if ((initialRating <= baseValue) || !f) {\n                        return;\n                    }\n\n                    $all = self.$widget.find('a');\n\n                    if ($a.length) {\n                        $fractional = $a[(getData('userOptions').reverse) ? 'prev' : 'next']();\n                    } else {\n                        $fractional = $all[(getData('userOptions').reverse) ? 'last' : 'first']();\n                    }\n\n                    $fractional.addClass('br-fractional');\n                    $fractional.addClass('br-fractional-' + f);\n                }\n            };\n\n            // check if the element is deselectable?\n            var isDeselectable = function($element) {\n                if (!getData('allowEmpty') || !getData('userOptions').deselectable) {\n                    return false;\n                }\n\n                return (ratingValue() == $element.attr('data-rating-value'));\n            };\n\n            // handle click events\n            var attachClickHandler = function($elements) {\n                $elements.on('click.barrating', function(event) {\n                    var $a = $(this),\n                        options = getData('userOptions'),\n                        value,\n                        text;\n\n                    event.preventDefault();\n\n                    value = $a.attr('data-rating-value');\n                    text = $a.attr('data-rating-text');\n\n                    // is current and deselectable?\n                    if (isDeselectable($a)) {\n                        value = getData('emptyRatingValue');\n                        text = getData('emptyRatingText');\n                    }\n\n                    // remember selected rating\n                    setData('ratingValue', value);\n                    setData('ratingText', text);\n                    setData('ratingMade', true);\n\n                    setSelectFieldValue(value);\n                    showSelectedRating(text);\n\n                    applyStyle();\n\n                    // onSelect callback\n                    options.onSelect.call(\n                        self,\n                        ratingValue(),\n                        ratingText(),\n                        event\n                    );\n\n                    return false;\n                });\n            };\n\n            // handle mouseenter events\n            var attachMouseEnterHandler = function($elements) {\n                $elements.on('mouseenter.barrating', function() {\n                    if (!self.options.initialRating) {\n                        var $a = $(this);\n                        resetStyle();\n                        $a.addClass('br-active')[nextAllorPreviousAll()]()\n                            .addClass('br-active');\n                        showSelectedRating($a.attr('data-rating-text'));\n                    }\n                });\n            };\n\n            // handle mouseleave events\n            var attachMouseLeaveHandler = function() {\n                self.$widget.on('mouseleave.barrating blur.barrating', function() {\n                    showSelectedRating();\n                    applyStyle();\n                });\n            };\n\n            // somewhat primitive way to remove 300ms click delay on touch devices\n            // for a more advanced solution consider setting `fastClicks` option to false\n            // and using a library such as fastclick (https://github.com/ftlabs/fastclick)\n            var fastClicks = function($elements) {\n                $elements.on('touchstart.barrating', function(event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n\n                    $(this).click();\n                });\n            };\n\n            // disable clicks\n            var disableClicks = function($elements) {\n                $elements.on('click.barrating', function(event) {\n                    event.preventDefault();\n                });\n            };\n\n            var attachHandlers = function($elements) {\n                // attach click event handler\n                attachClickHandler($elements);\n\n                if (self.options.hoverState) {\n                    // attach mouseenter event handler\n                    attachMouseEnterHandler($elements);\n\n                    // attach mouseleave event handler\n                    attachMouseLeaveHandler($elements);\n                }\n            };\n\n            var detachHandlers = function($elements) {\n                // remove event handlers in the \".barrating\" namespace\n                $elements.off('.barrating');\n            };\n\n            var setupHandlers = function(readonly) {\n                var $elements = self.$widget.find('a');\n\n                if (getData('userOptions').fastClicks) {\n                    fastClicks($elements);\n                }\n\n                if (readonly) {\n                    detachHandlers($elements);\n                    disableClicks($elements);\n                } else {\n                    attachHandlers($elements);\n                }\n            };\n\n            this.show = function() {\n                // run only once\n                if (getData()) {\n                    return;\n                }\n\n                // wrap element\n                wrapElement();\n\n                // save data\n                saveDataOnElement();\n\n                // build & append widget to the DOM\n                self.$widget = buildWidget();\n                self.$widget.insertAfter(self.$elem);\n\n                applyStyle();\n\n                showSelectedRating();\n\n                setupHandlers(self.options.readonly);\n\n                // hide the select field\n                self.$elem.hide();\n            };\n\n            this.readonly = function(state) {\n                if (typeof state !== 'boolean' || getData('readOnly') == state) {\n                    return;\n                }\n\n                setupHandlers(state);\n                setData('readOnly', state);\n                self.$widget.toggleClass('br-readonly');\n            };\n\n            this.set = function(value) {\n                var options = getData('userOptions');\n\n                if (self.$elem.find('option[value=\"' + value + '\"]').length === 0) {\n                    return;\n                }\n\n                // set data\n                setData('ratingValue', value);\n                setData('ratingText', self.$elem.find('option[value=\"' + value + '\"]').text());\n                setData('ratingMade', true);\n\n                setSelectFieldValue(ratingValue());\n                showSelectedRating(ratingText());\n\n                applyStyle();\n\n                // onSelect callback\n                if (!options.silent) {\n                    options.onSelect.call(\n                        this,\n                        ratingValue(),\n                        ratingText()\n                    );\n                }\n            };\n\n            this.clear = function() {\n                var options = getData('userOptions');\n\n                // restore original data\n                setData('ratingValue', getData('originalRatingValue'));\n                setData('ratingText', getData('originalRatingText'));\n                setData('ratingMade', false);\n\n                resetSelectField();\n                showSelectedRating(ratingText());\n\n                applyStyle();\n\n                // onClear callback\n                options.onClear.call(\n                    this,\n                    ratingValue(),\n                    ratingText()\n                );\n            };\n\n            this.destroy = function() {\n                var value = ratingValue();\n                var text = ratingText();\n                var options = getData('userOptions');\n\n                // detach handlers\n                detachHandlers(self.$widget.find('a'));\n\n                // remove widget\n                self.$widget.remove();\n\n                // remove data\n                removeDataOnElement();\n\n                // unwrap the element\n                unwrapElement();\n\n                // show the element\n                self.$elem.show();\n\n                // onDestroy callback\n                options.onDestroy.call(\n                    this,\n                    value,\n                    text\n                );\n            };\n        }\n\n        BarRating.prototype.init = function (options, elem) {\n            this.$elem = $(elem);\n            this.options = $.extend({}, $.fn.barrating.defaults, options);\n\n            return this.options;\n        };\n\n        return BarRating;\n    })();\n\n    $.fn.barrating = function (method, options) {\n        return this.each(function () {\n            var plugin = new BarRating();\n\n            // plugin works with select fields\n            if (!$(this).is('select')) {\n                $.error('Sorry, this plugin only works with select fields.');\n            }\n\n            // method supplied\n            if (plugin.hasOwnProperty(method)) {\n                plugin.init(options, this);\n                if (method === 'show') {\n                    return plugin.show(options);\n                } else {\n                    // plugin exists?\n                    if (plugin.$elem.data('barrating')) {\n                        plugin.$widget = $(this).next('.br-widget');\n                        return plugin[method](options);\n                    }\n                }\n\n                // no method supplied or only options supplied\n            } else if (typeof method === 'object' || !method) {\n                options = method;\n                plugin.init(options, this);\n                return plugin.show();\n            } else {\n                $.error('Method ' + method + ' does not exist on jQuery.barrating');\n            }\n        });\n    };\n\n    $.fn.barrating.defaults = {\n        theme:'',\n        initialRating:null, // initial rating\n        allowEmpty:null, // allow empty ratings?\n        emptyValue:'', // this is the expected value of the empty rating\n        showValues:false, // display rating values on the bars?\n        showSelectedRating:true, // append a div with a rating to the widget?\n        deselectable:true, // allow to deselect ratings?\n        reverse:false, // reverse the rating?\n        readonly:false, // make the rating ready-only?\n        fastClicks:true, // remove 300ms click delay on touch devices?\n        hoverState:true, // change state on hover?\n        silent:false, // supress callbacks when controlling ratings programatically\n        triggerChange:true, // trigger change event when ratings are set or reset\n        onSelect:function (value, text, event) {\n            value = text;\n            value = event;\n        }, // callback fired when a rating is selected\n        onClear:function (value, text) {\n            value = text;\n        }, // callback fired when a rating is cleared\n        onDestroy:function (value, text) {\n            value = text;\n        } // callback fired when a widget is destroyed\n    };\n\n    $.fn.barrating.BarRating = BarRating;\n\n}));\n"],"names":["define","amd","$","BarRating","self","this","wrapElement","classes","options","theme","push","$elem","wrap","join","unwrapElement","unwrap","findOption","value","isNumeric","Math","floor","getInitialOption","initialRating","getEmptyOption","$emptyOpt","find","emptyValue","length","allowEmpty","prependTo","getData","key","data","setData","_typeof","saveDataOnElement","$opt","val","text","emptyText","userOptions","ratingValue","ratingText","originalRatingValue","originalRatingText","emptyRatingValue","emptyRatingText","readOnly","readonly","ratingMade","removeDataOnElement","removeData","buildWidget","$w","each","html","$a","showValues","append","showSelectedRating","reverse","addClass","nextAllorPreviousAll","setSelectFieldValue","prop","triggerChange","change","resetSelectField","defaultSelected","parent","fraction","round","resetStyle","$widget","removeClass","index","match","applyStyle","$all","$fractional","baseValue","f","isDeselectable","$element","deselectable","attr","attachClickHandler","$elements","on","event","preventDefault","onSelect","call","attachMouseEnterHandler","attachMouseLeaveHandler","fastClicks","stopPropagation","click","disableClicks","attachHandlers","hoverState","detachHandlers","off","setupHandlers","show","insertAfter","hide","state","toggleClass","set","silent","clear","onClear","destroy","remove","onDestroy","prototype","init","elem","extend","fn","barrating","defaults","method","plugin","is","error","hasOwnProperty","next"],"mappings":"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"}